package Problem_List.Q319_Bulb_Switcher;

/*
Розв’язок задачі "Bulb Switcher"
Аналіз проблеми
У нас є n лампочок, які спочатку вимкнені. Ми проходимо через лампочки n разів, кожного разу перемикаючи певні з них:

1-й прохід: Вмикаємо всі лампочки.
2-й прохід: Вимикаємо кожну другу лампочку.
3-й прохід: Перемикаємо кожну третю лампочку.
...
n-й прохід: Перемикаємо лише n-ту лампочку.
Потрібно знайти кількість лампочок, які залишаться увімкненими після n проходів.

Спостереження
Кожна лампочка змінює свій стан кожного разу, коли її номер ділиться на певний індекс i (наприклад, лампочка №6 змінюється у раундах 1, 2, 3, 6).

Якщо лампочку перемикають непарну кількість разів, вона залишиться увімкненою.
Якщо лампочку перемикають парну кількість разів, вона залишиться вимкненою.
Лампочка змінює стан стільки разів, скільки у неї дільників.
Зазвичай у числа дільники парні, бо вони приходять у парах (наприклад, у 12: (1,12), (2,6), (3,4)).

❗ Але у квадратних чисел (1, 4, 9, 16, 25, ...) є непарна кількість дільників, бо один з дільників повторюється (наприклад, 9 має (1,9), (3,3)).

Головний висновок
Тільки лампочки, що мають номери-квадрати чисел (1, 4, 9, 16...), залишаться увімкненими після всіх раундів.

Оптимізоване рішення
Визначаємо кількість повних квадратів менших або рівних n.
Використовуємо Math.sqrt(n), бо він повертає корінь числа.
Оскільки ми рахуємо лише цілі числа, застосовуємо (int) Math.sqrt(n), що автоматично округлює вниз.

*/

class Solution {
    public int bulbSwitch(int n) {
        return (int) Math.sqrt(n);
    }
}

